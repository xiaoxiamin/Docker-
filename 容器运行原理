容器和虚拟机的区别在于 ：
容器：  
docker容器只是一个进程而已，只是利用镜像提供的rootfs提供了调用所需的userland库支									  持，使得进程可以在受控环境下运行而已，它并没有虚拟出一个机器来。
 （内核共用）容器内的进程是直接运行在宿主内核上 
 （用户空间隔离） 容器的userland由容器镜像提供，也就是说镜像提供了rootfs

假设宿主是ubuntu系统，容器是由centos镜像运行的，centos容器中的进程会直接向ubuntu宿主的内核发送syscall ，而不会直接或间接的使用任何ubuntu的 userland的库。

虚拟机：
虚拟机是虚拟环境，在现有的系统上虚拟一套物理设备，然后在虚拟环境内运行一个虚拟环境的操作系统内核
在虚拟机中，CentOS 的进程发送 syscall 内核调用，该请求会被虚拟机内的 CentOS 的内核接到，然后 CentOS 内核访问虚拟硬件时，由虚拟机的服务软件截获，并使用宿主系统，也就是 Ubuntu 的内核及userland的库去执行

Syscall意义
内核提供用户空间程序与内核空间进行交互的一套标准接口，这些接口让用户态程序能 受限 访问硬件设备，比如申请系统资源，操作设备读写，创建新进程等。用户空间发生请求，内核空间负责执行，这些接口便是用户空间和内核空间共同识别的桥梁，这里提到两个字“受限”，是由于为了保证内核稳定性，而不能让用户空间程序随意更改系统，必须是内核对外开放的且满足权限的程序才能调用相应接口。
在用户空间和内核空间之间，有一个叫做Syscall(系统调用, system call)的中间层，是连接用户态和内核态的桥梁。这样即提高了内核的安全型，也便于移植，只需实现同一套接口即可。Linux系统，用户空间通过向内核空间发出Syscall，产生软中断，从而让程序陷入内核态，执行相应的操作。对于每个系统调用都会有一个对应的系统调用号，比很多操作系统要少很多。
